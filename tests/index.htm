<html>
	<head>
	<script src="http://code.jquery.com/qunit/qunit-git.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href= "http://code.jquery.com/qunit/qunit-git.css/"></link>
	<script src="../source/extend.js" typeo="text/javascript"></script>
	<script type="text/javascript">
	function isFunction(object,error) {
		equals(typeof object, "function", error + " is not a function");
	}
	function validateInterface(object, objectName, validator) {
		if (validator.constructor.prototype === Object.prototype) {//passed a literal so do a custom check
			for (var i in validator) {
				var member = validator[i];
				if (member === object[i]) {
				ok(true)
					continue;
				
				}
				else if (typeof member === "function") {
					if (member === Boolean) {
						ok(object[i].constructor === member,  objectName+"."+i+" is not a Boolean")
						continue;
					}
					if (member === Object) {
						ok(typeof object[i] === "object" && object[i].constructor !== Array, objectName+"."+i+" is not an object");
						continue;
					} else {
						if (object[i] instanceof member  || typeof object[i] === "function") {
						ok(true)
						continue;
						}
						ok(false , objectName+"."+i+" is not an instance of type "+member.toString().match(/^\s*function\s*([^\(]+)\s*\(/)[1]||"unknown");
						continue;
					}
				}
				if (member === undefined) {
					ok(i in object, objectName+"."+i+" property is not present at all");
				}
				else {//loose equality check
					ok (member == object[i], objectName+"."+i+" is not "+member);
				}
			}
		}
		else {
			for (var i in validator) {
				ok(i in object);
				if (typeof validator[i] === "function") {
					ok(typeof object[i] === "function", objectName+"."+i+" is not a method");
				}
			}
		
		}
	}

	onload = function () {
		test("Extend load and initialisation", function() {
		  var extend = window.extend;
		  equals(typeof extend, "function", "extend does not exist in global scope. extend");
		  equals(extend.global, window, "extend global property is equals to window object")
		 });
		test("extend interface", function () {
			validateInterface(extend,"extend", {
					"PropertyFilter": Function,
					"require": Function,
					"RequireRequest": Function,
					"buildRequireRequest": Function,
					INSTANCE_ONLY: undefined, //these are 'constants' and technically could be anything
					INCLUDE_INHERITED: undefined,
					ALL: undefined,
					METHODS_ONLY: undefined,
					EXCLUDE_ALL_OBJECTS: undefined
					
			}
			);
		
		});
		test("extend.PropertyFilter interface", function () {
			validateInterface(extend.PropertyFilter.prototype, "extend.PropertyFilter.prototype", {
				filterProperty: Function,
				filter: undefined
			});
		});
		
	}
	</script>
	</head>
	<body>
	<h1 id="qunit-header">QUnit Test Suite</h1>
	<h2 id="qunit-banner"></h2>
	<div id="qunit-testrunner-toolbar"></div>
	<h2 id="qunit-userAgent"></h2>
	<ol id="qunit-tests"></ol>

	</body>

</html>

