<html>
	<head>
	<script src="http://code.jquery.com/qunit/qunit-git.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href= "http://code.jquery.com/qunit/qunit-git.css/"></link>
	<script src="../source/extend.js" typeo="text/javascript"></script>
	<script type="text/javascript">
	function isFunction(object,error) {
		equals(typeof object, "function", error + " is not a function");
	}
	function getPropertyNamesAsArray(object,condition) {
		condition = condition || function (object,condition) {
			return true
		};
		var properties = [],
			i;
		for (i in object) {
			if (condition(object,i)) {
				properties.push(i)
			}
			
		}
		return properties;
	}
	function comparePropertyNamesArray(properties1, properties2) {
		if (properties1.length != properties2.length) {
			
			return false;
		}
		for (var i = 0; i!= properties1.length; i++) {
			if (properties1[i] !== properties2[i]) {
				return false
			}
		}
		return true;
	}
	function instancePropertiesOnly(object,property) {
		return object.hasOwnProperty(property);
	}
	function inheritedPropertiesOnly(object,property) {
		return !object.hasOwnProperty(property);
	}
	function allObjectPropertiesAreIdentical(object1,object2) {
		var properties1 = getPropertyNamesAsArray(object1);
			properties2 = getPropertyNamesAsArray(object2);
		return comparePropertyNamesArray(properties1, properties2);
	}
	function allInheritedPropertiesAreIdentical(object1, object2) {
		var properties1 = getPropertyNamesAsArray(object1, inheritedPropertiesOnly);
			properties2 = getPropertyNamesAsArray(object2, inheritedPropertiesOnly);
		return comparePropertyNamesArray(properties1, properties2);
	}
	function allInstancePropertiesAreIdentical(object1, object2) {
		var properties1 = getPropertyNamesAsArray(object1, instancePropertiesOnly);
			properties2 = getPropertyNamesAsArray(object2, instancePropertiesOnly);
		return comparePropertyNamesArray(properties1, properties2);
	}
	function validateInterface(object, objectName, validator) {
		if (validator.constructor.prototype === Object.prototype) {//passed a literal so do a custom check
			for (var i in validator) {
				var member = validator[i];
				if (member === object[i]) {
				ok(true)
					continue;
				
				}
				else if (typeof member === "function") {
					if (member === Boolean) {
						ok(object[i].constructor === member,  objectName+"."+i+" is not a Boolean")
						continue;
					}
					if (member === Object) {
						ok(typeof object[i] === "object" && object[i].constructor !== Array, objectName+"."+i+" is not an object");
						continue;
					} else {
						if (object[i] instanceof member  || typeof object[i] === "function") {
						ok(true)
						continue;
						}
						ok(false , objectName+"."+i+" is not an instance of type "+member.toString().match(/^\s*function\s*([^\(]+)\s*\(/)[1]||"unknown");
						continue;
					}
				}
				if (member === undefined) {
					ok(i in object, objectName+"."+i+" property is not present at all");
				}
				else {//loose equality check
					ok (member == object[i], objectName+"."+i+" is not "+member);
				}
			}
		}
		else {
			for (var i in validator) {
				ok(i in object);
				if (typeof validator[i] === "function") {
					ok(typeof object[i] === "function", objectName+"."+i+" is not a method");
				}
			}
		
		}
	}
	function  someFunction1() {}

	
	onload = function () {
		test("Extend load and initialisation", function() {
		  var extend = window.extend;
		  equals(typeof extend, "function", "extend does not exist in global scope. extend");
		  equals(extend.global, window, "extend global property is equals to window object")
		 });
		test("extend interface", function () {
			validateInterface(extend,"extend", {
					PropertyFilter: Function,
					require: Function,
					RequireRequest: Function,
					buildRequireRequest: Function,
					INSTANCE_ONLY: undefined, //these are 'constants' and technically could be anything
					INCLUDE_INHERITED: undefined,
					ALL: undefined,
					METHODS_ONLY: undefined,
					EXCLUDE_ALL_OBJECTS: undefined
					
			}
			);
		
		});
		test("extend.PropertyFilter interface", function () {
			validateInterface(extend.PropertyFilter.prototype, "extend.PropertyFilter.prototype", {
				filterProperty: Function,
				filter: undefined
			});
		});

		test("basic extend - (literal source to literal target)", function () {
			var object1 = {
				1:1,
				a: {},
				b: function(){}
			}
			var object2 = {}
			extend(object2,object1);
			ok(allObjectPropertiesAreIdentical(object2,object1),"Cloned object literal is not identical to source object")	
		
		});
		test("basic extend - (typed source to literal)", function () {
			function TypedSource(){}
			TypedSource.prototype.typeProperty = "typeProperty"
			var typedSource = new TypedSource();
			typedSource.instanceProperty = "instanceProperty"
			var literalTarget = {}
			extend(literalTarget,typedSource);
			ok(!literalTarget.typeProperty,"literal has inherited a type property")
			ok(literalTarget.instanceProperty,"literal has not inherited an instance property")
		});
	}
	</script>
	</head>
	<body>
	<h1 id="qunit-header">QUnit Test Suite</h1>
	<h2 id="qunit-banner"></h2>
	<div id="qunit-testrunner-toolbar"></div>
	<h2 id="qunit-userAgent"></h2>
	<ol id="qunit-tests"></ol>

	</body>

</html>

